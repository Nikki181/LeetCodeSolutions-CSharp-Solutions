/*

You are given an m x n grid where each cell can have one of three values:

0 representing an empty cell,
1 representing a fresh orange, or
2 representing a rotten orange.
Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.

*/

public class Solution {
    public int OrangesRotting(int[][] grid) {
        
        int min=0;
        
        Queue<int[]> rottenOranges = new Queue<int[]>();
        for(int i=0;i<grid.Length;i++){
            for(int j=0;j<grid[i].Length;j++){
                if(grid[i][j]==2)
                    rottenOranges.Enqueue(new int[] { i, j, grid[i][j], min });
            }
        }
     
        while (rottenOranges.Count > 0) {
            var rottenOrange = rottenOranges.Dequeue();
            min = rottenOrange[3];
            var nextMinute = min + 1;
            checkAdjacentCell(grid, rottenOranges, rottenOrange[0] - 1, rottenOrange[1], nextMinute);
            checkAdjacentCell(grid, rottenOranges, rottenOrange[0], rottenOrange[1] - 1, nextMinute);
            checkAdjacentCell(grid, rottenOranges, rottenOrange[0] + 1, rottenOrange[1], nextMinute);
            checkAdjacentCell(grid, rottenOranges, rottenOrange[0], rottenOrange[1] + 1, nextMinute);
        }
                
        for (var i = 0; i < grid.Length; i++) {
            for (var j = 0; j < grid[i].Length; j++) {
                if (grid[i][j] == 1) {
                    return -1;
                }
            }
        }
        return min;
             
    }
   private void checkAdjacentCell(int[][] grid, Queue<int[]> rottenOranges, int x, int y, int min) {
        if (x < 0 || y < 0) return;
        if (x >= grid.Length || y >= grid[x].Length) return;

        if (grid[x][y] == 1) {
            grid[x][y] = 2;
            rottenOranges.Enqueue(new int[] { x, y, grid[x][y], min });
        }
    }
}
