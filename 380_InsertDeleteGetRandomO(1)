/* 
Implement the RandomizedSet class:

RandomizedSet() Initializes the RandomizedSet object.
bool insert(int val) Inserts an item val into the set if not present. Returns true if the item was not present, false otherwise.
bool remove(int val) Removes an item val from the set if present. Returns true if the item was present, false otherwise.
int getRandom() Returns a random element from the current set of elements (it's guaranteed that at least one element exists when this method is called). Each element must have the same probability of being returned.
 
Example 1:

Input
["RandomizedSet", "insert", "remove", "insert", "getRandom", "remove", "insert", "getRandom"]
[[], [1], [2], [2], [], [1], [2], []]
Output
[null, true, false, true, 2, true, false, 2]

Constraints:

-231 <= val <= 231 - 1
At most 105 calls will be made to insert, remove, and getRandom.
There will be at least one element in the data structure when getRandom is called.
 
Follow up: Could you implement the functions of the class with each function works in average O(1) time?

*/

public class RandomizedSet {

    Dictionary<int,int> dict=new Dictionary<int,int>();
    Random _random = new Random();
    int maxcounter=0;
    /** Initialize your data structure here. */
    public RandomizedSet() {
        
    }
    
    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    public bool Insert(int val) {
        if(dict.ContainsKey(val))
            return false;
        maxcounter++;
        dict.Add(val,maxcounter);
        
        return true;
        
    }
    
    /** Removes a value from the set. Returns true if the set contained the specified element. */
    public bool Remove(int val) {
        if(dict.ContainsKey(val))
        {
            dict.Remove(val);
            maxcounter--;
            return true;
        }
        return false;
    }
    
    /** Get a random element from the set. */
    public int GetRandom() {
        
        var index = _random.Next(dict.Keys.Count);        
        var val = dict.Keys.ElementAt(index);
        return val;
        
    }
}

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet obj = new RandomizedSet();
 * bool param_1 = obj.Insert(val);
 * bool param_2 = obj.Remove(val);
 * int param_3 = obj.GetRandom();
 */
