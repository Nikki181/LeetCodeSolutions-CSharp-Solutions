/*

input: h = 5, w = 4, horizontalCuts = [1,2,4], verticalCuts = [1,3]
Output: 4 
Explanation: The figure above represents the given rectangular cake. Red lines are the horizontal and vertical cuts. After you cut the cake, the green piece of cake has the maximum area.
Example 2:



Input: h = 5, w = 4, horizontalCuts = [3,1], verticalCuts = [1]
Output: 6
Explanation: The figure above represents the given rectangular cake. Red lines are the horizontal and vertical cuts. After you cut the cake, the green and yellow pieces of cake have the maximum area.
Example 3:

Input: h = 5, w = 4, horizontalCuts = [3], verticalCuts = [3]
Output: 9
 
Constraints:

2 <= h, w <= 10^9
1 <= horizontalCuts.length < min(h, 10^5)
1 <= verticalCuts.length < min(w, 10^5)
1 <= horizontalCuts[i] < h
1 <= verticalCuts[i] < w
It is guaranteed that all elements in horizontalCuts are distinct.
It is guaranteed that all elements in verticalCuts are distinct.
*/

public class Solution {
    public int MaxArea(int h, int w, int[] horizontalCuts, int[] verticalCuts) {
       Array.Sort(horizontalCuts);
       Array.Sort(verticalCuts);
        
      long maxHor = horizontalCuts[0];
      long maxVert = verticalCuts[0];
        
      for(int i=1;i<horizontalCuts.Length;i++)
      {
          maxHor=Math.Max(maxHor,horizontalCuts[i]-horizontalCuts[i - 1]);
      }
     maxHor=Math.Max(maxHor,h-horizontalCuts[horizontalCuts.Length-1]);
        
        
      for(int i=1;i<verticalCuts.Length;i++)
      {
          maxVert=Math.Max(maxVert,verticalCuts[i]-verticalCuts[i - 1]);
      }
     maxVert=Math.Max(maxVert,w-verticalCuts[verticalCuts.Length-1]);
        
    BigInteger sq = maxHor * maxVert;
    sq = sq % 1000000007;
    return  (int)sq;
    }
}
