/* On an infinite plane, a robot initially stands at (0, 0) and faces north. The robot can receive one of three instructions:

"G": go straight 1 unit;
"L": turn 90 degrees to the left;
"R": turn 90 degrees to the right.
The robot performs the instructions given in order, and repeats them forever.

Return true if and only if there exists a circle in the plane such that the robot never leaves the circle.

Example 1:

Input: instructions = "GGLLGG"
Output: true
Explanation: The robot moves from (0,0) to (0,2), turns 180 degrees, and then returns to (0,0).
When repeating these instructions, the robot remains in the circle of radius 2 centered at the origin.
Example 2:

Input: instructions = "GG"
Output: false
Explanation: The robot moves north indefinitely.
Example 3:

Input: instructions = "GL"
Output: true
Explanation: The robot moves from (0, 0) -> (0, 1) -> (-1, 1) -> (-1, 0) -> (0, 0) -> ...
 

Constraints:

1 <= instructions.length <= 100
instructions[i] is 'G', 'L' or, 'R'.

*/

public class Solution {
        int x=0;
        int y=0;
        int direction=0;
        int count=0;
    public bool IsRobotBounded(string instructions) {
                
        while(count<4)
        {
            bool iscyclepresent=checkcycle(instructions);
            if(iscyclepresent)
                return true;   
        }
        return false;
    }
    public bool checkcycle(string instructions)
    {
        foreach(var item in instructions)
        {
            switch(item)
            {
                case 'L':
               //starting direction is up so start with right(1),down(2) and than left(3)
                        direction=(direction + 3)%4; 
                        break;
                case 'R':
                        direction=(direction + 1)%4;
                        break;
                case 'G':
                        if(direction==0) //Up
                            y++;
                        if(direction==1)    // right
                            x++;
                        if(direction==2) //Down
                            y--;
                        if(direction==3) //Left
                            x--;
                        break;
            }
        }
        if(x==0 && y==0){
            return true;
        }
        else{
            count++;
            return false;
        }
    }
}
