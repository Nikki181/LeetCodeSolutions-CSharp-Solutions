/*
Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.

Note that the same word in the dictionary may be reused multiple times in the segmentation.

Example 1:

Input: s = "leetcode", wordDict = ["leet","code"]
Output: true
Explanation: Return true because "leetcode" can be segmented as "leet code".
Example 2:

Input: s = "applepenapple", wordDict = ["apple","pen"]
Output: true
Explanation: Return true because "applepenapple" can be segmented as "apple pen apple".
Note that you are allowed to reuse a dictionary word.
Example 3:

Input: s = "catsandog", wordDict = ["cats","dog","sand","and","cat"]
Output: false
 
Constraints:

1 <= s.length <= 300
1 <= wordDict.length <= 1000
1 <= wordDict[i].length <= 20
s and wordDict[i] consist of only lowercase English letters.
All the strings of wordDict are unique.

*/
public class Solution {
    Dictionary<string,bool> dict=new Dictionary<string,bool>();
    public bool WordBreak(string s, IList<string> wordDict) {
        if(wordDict.Contains(s))
            return true;
        
        if(dict.ContainsKey(s))
            return dict[s];
        for(int i=1;i<=s.Length;i++){
            string left=s.Substring(0,i);
            if(wordDict.Contains(left) && WordBreak(s.Substring(i),wordDict)){
                dict.Add(s,true);
                return true;
            }
        }
        dict.Add(s,false);
        return false;
    }
}
